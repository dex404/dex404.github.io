<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++学习笔记day1]]></title>
    <url>%2F2019%2F08%2F06%2FC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day1%2F</url>
    <content type="text"><![CDATA[今天是写博客的第一天，记录一下C++学习过程，用的教材是C++ Primer Plus,今天是从本书第3章-处理数据开始记录，这里很多知识都不会写下来，只记些我常忘的或者重要的，over 处理数据1、变量名命名 C++提倡使用有含义的变量名，例如cost_of_trip,这种命名做法通常是用下划线字符将单词隔开，或者从第二个单词开始每个单词的首字母大写，如costOfTrip，命名风格在第二张有讨论，我觉得这个取决个人习惯吧。 C++变量名命名规则如下： 1&gt;名称中只能使用字母字符、数字和下划线—— 2&gt;名称的第一个字符不能是数字 3&gt;区分大小写 4&gt;不能将C++关键字用作名称 5&gt;以两个下划线或下划线和大写字母开头的名称被保留给实现（编译器及其使用的资源）使用。以一个下划线开头的名称被保留给实现，用作全局标识符 6&gt;C++对于名称的长度没有限制，但是有些平台有长度限制 2、整型 short、int、long、long long,C++规定了最小长度，short至少16位（bit),int至少与short一样长，long至少32位，且至少与int一样长，long long至少64位，且至少与long一样长。 计算机内存的基本单元是位(bit),8位单元可以表示0-255或者-128-127，每增加一位，组合数便加倍，字节通常指的是8位的内存单元，即1 byte=8 bit; sizeof()运算符指出，在使用8位字节系统中，int的长度位4个字节，short是2个字节。 整型的无符号类型，优点是增大变量能够存储的最大值，在整型超越限制值最大最小值时，整型的表现就像钟表，其值将为范围另一端的值。 3、char char最常被用来处理字符，但也可以将用作比short更小的整型。 字符常量的书写方式，最常用的是将字符用单引号括起来，’A’,这种表示法代表的是字符的数值编码，在ASCII系统中，’A’为65，即字符A的ASC码。 C++将一些字符赋予了含义–转义序列， 123cout&lt;&lt;endl; //using the endl manipulator;cout&lt;&lt;&apos;\n&apos;; //using a character constant;cout&lt;&lt;&quot;\n&quot;; //using a string; 都能实现将光标移到下一行。 const限定符 使用const来定义符号常量，如const int Wifes=3000; 便可以在程序中使用Wifes，在定义符号常量时，通常会将首字母大写，有助于区分变量和常量。 如果在声明变量时没有赋值，则该常量值不确定，且在程序中不能修改。 浮点数 计算机将带有小数部分的数字分成两部分存储，一部分表示值，另一部分用于对值进行放大或缩小，例如123.4567和12.34567，可以表示成0.1234567(基准值)和1000（缩放因子），0.1234567和100，缩放因子的作用就是移动小数点的位置，术语浮点因此得名，C++是基于二进制数。 float至少32位，double至少48位，且不少于float,long double至少和double一样多。 在用cout输出浮点数时，cout通常会删除结尾的零，所以可以调用cout.setf(ios_base::fixed, ios_base::floatfield); ios_bash::fixed是设置cout为定点输出格式，ios_bash::floatdield是设置输出时按浮点格式，小数点后有6位数字。因为float只能保证6位有效位。 ###算术运算符 除法运算符（/）的行为取决于操作数的类型。如果两个操作数都是证书，则C++执行整数除法，即小数点被丢弃，结果为整数。如果其中有一个操作数是浮点值，则小数部分被保留，结果为浮点数。 强制类型转换 12int bots=20long (bots) 强制类型转换不会修改变量本身，而是创建一个新的、指定类型的值，可以在表达式中使用这个值 static_cast&lt;long&gt; (bots) 也是一种强制类型转换运算符，还有集中将在15章介绍。 auto 使用关键字auto，让编译器能够根据初始值的类型推断变量的类型。 auto n=100; n is int 在处理复杂类型，如标准模板库STL中的类型时，auto的优势才能显现出来。]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
